package WebService::Bonusly::[% service.ucfirst %];

use v5.14;
use Moose;
use Carp;
use JSON;
use URI::Escape;

has ws => (
    is          => 'ro',
    isa         => 'WebService::Bonusly',
    required    => 1,
    weak_ref    => 1,
    handles     => [ qw( tokan base_url ua ) ],
);

[% FOR method IN methods -%]
[% name = method.key -%]
[% def  = method.value %]
sub [% name -%] {
    my ($self, %params) = @_;

    my %clean;
    [% FOR field IN def.required.merge(def.optional) -%]
    [% IF field.match('^%'); field = field.replace('^%', '') %]
    croak "parameter [% field -%] must be a HASH for [% service -%]->[% name -%]"
        if defined $params{[% field %]} and ref($params{[% field %]}) ne 'HASH';
    [% END -%]
    [% IF def.is_required(field) %]
    croak "parameter [% field -%] is required for [% service -%]->[% name -%]"
        unless defined $params{[% field -%]};
    [% END %]
    $clean{[% field -%]} = $params{[% field -%]};
    [% END -%]

    my $path = $self->base_url . "[% def.path %]";
    $path =~ s/:(\w+)/delete $params{$1}/ge;
    [% IF def.method == 'GET' OR def.method == 'DELETE' %]
    $path .= '?';
    [% IF def.token -%]$path .= 'access_token=' . $self->token;[% END -%]
    while (my ($k, $v) = each %clean) {
        $path .= uri_escape($k) . '=' . uri_escape($v);
    }

    my $res = $self->ua->get($path);
    [% ELSIF def.method == 'POST' OR def.method == 'PUT' %]
    [% IF def.token -%]$clean{access_token} = $self->token;[% END -%]
    my $content = encode_json(%clean);
    my $res = $self->ua->post($path, [], $content); 
    [% ELSE %]
    [% THROW method "Bad Method " _ method %]
    [% END %]
    return decode_json($res->content);
}
[% END -%]

=for Pod::Coverage *EVERYTHING*
=cut

__PACKAGE__->meta->make_immutable;
